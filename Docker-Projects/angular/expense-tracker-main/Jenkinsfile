pipeline {
    agent {
        label 'master-node'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
        DOCKER_CREDS = credentials('dockerhub') 
        GIT_HASH = GIT_COMMIT.take(7)
        IMAGE_NAME = "saiedmakshat/angular-test:${GIT_HASH}"
    }
    tools {
        // Reference the NodeJS installation configured in Global Tool Configuration
        nodejs 'node-18' // Use the name you assigned earlier
    }
    stages {
        // stage('Git Checkout') {
        //     steps {
        //         git branch: 'main', changelog: false, credentialsId:
        //         'github', poll: false, url:
        //         'https://github.com/saiedmakshat/my-projects.git'
        //     }
        // }
        stage('npm install') {
            steps {
                dir('Docker-Projects/angular/expense-tracker-main') {
                    sh 'npm install'
                }
            }
        }
        stage('npm build') {
            steps {
                dir('Docker-Projects/angular/expense-tracker-main') {
                    sh 'npm run build --prod'
                }
            }
        }
//        stage('OWASP Scan') {
//            steps {
//                dir('Docker-Projects/angular/expense-tracker-main') {
//                    dependencyCheck additionalArguments: ' --scan ./ --format XML --format HTML', odcInstallation: 'DP'
//                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
//                }
//            }
//        }
        stage('SonarQube') {
            steps {
               dir('Docker-Projects/angular/expense-tracker-main') { 
                    withSonarQubeEnv('sonar-server') {
                        sh '$SCANNER_HOME/bin/sonar-scanner -Dsonar-ProjectName=expense-tracker -Dsonar.sources=. -Dsonar.projectKey=expense-tracker'
                    }
                }
            }
        }
        stage('build image') {
            steps {
                dir('Docker-Projects/angular/expense-tracker-main') {
                    sh "docker build . -t ${IMAGE_NAME}"
                    sh "echo IMAGE_NAME=${IMAGE_NAME} > .env"
                }
            }
        }
        stage('Login to Docker') {
            steps {
                // Use the environment variables created by credentials() for docker login
                sh "docker login -u ${DOCKER_CREDS_USR} -p ${DOCKER_CREDS_PSW}" 
            }
        }
         stage('PUSH') {
            steps {
                sh "docker push ${IMAGE_NAME}"
            }
        }
        stage('Logout from Docker') {
            steps {
                // Use the environment variables created by credentials() for docker login
                sh "docker logout" 
            }
        }
        stage('rundocker stack') {
            steps {
                // Use the environment variables created by credentials() for docker login
                sh "docker stack depoly --compose-file docker-compose.yml -d" 
            }
        }
    }
}