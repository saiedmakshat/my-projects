pipeline {
    agent {
        label 'master-node'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
        //DOCKER_CREDS = credentials('dockerhub') 
        GIT_HASH = GIT_COMMIT.take(7)
        //IMAGE_NAME = "saiedmakshat/angular-test:${GIT_HASH}"
    }
    tools {
        nodejs 'node-18' // Use the name you assigned earlier
        //maven 'maven3'
    }
    stages {
        // stage('Git Checkout') {
        //     steps {
        //         git branch: 'main', changelog: false, credentialsId:
        //         'github', poll: false, url:
        //         'https://github.com/saiedmakshat/my-projects.git'
        //     }
        // }
        stage('npm install CycloneDX') {
            steps {
                dir('Docker-Projects/nodejs/node-app') {
                    sh "npm i @cyclonedx/cyclonedx-npm"
                }
            }
        }
        stage('npm install') {
            steps {
                dir('Docker-Projects/nodejs/node-app') {
                    sh 'npm install'
                }
            }
        }
        stage('Generate SBOM file') {
            steps {
                dir('Docker-Projects/nodejs/node-app') {
                    sh 'npx @cyclonedx/cyclonedx-npm --output-file node-app-sbom.json'
                }
            }
        } 
        // stage('npm build') {
        //     steps {
        //         dir('Docker-Projects/angular/expense-tracker-main') {
        //             sh 'npm run build --prod'
        //         }
        //     }
        // }
    //    stage('OWASP Scan') {
    //        steps {
    //            dir('Docker-Projects/angular/expense-tracker-main') {
    //                dependencyCheck additionalArguments: ' --scan ./ --format XML --format HTML', odcInstallation: 'DP'
    //                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
    //            }
    //        }
    //    }

        stage('SonarQube') {
            steps {
               dir('Docker-Projects/nodejs/node-app') { 
                    sh "echo sonar.projectKey=node-app > sonar-project.properties"
                    withSonarQubeEnv('sonar-server') {
                        sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar-ProjectName=node-app -Dsonar.sources=. -Dsonar.projectKey=node-app"
                    }
                }
            }
        }
       stage('Publish SBOM to Dependency-Track') {
            steps {
                dir('Docker-Projects/nodejs/node-app') {
                    dependencyTrackPublisher(
                        artifact: 'node-app-sbom.json', // Path to your generated SBOM
                        //projectId: 'a2295c70-5093-4f59-be92-e5d227a0f57b',
                        projectName: 'node-app',
                        projectVersion: '1.0.0',
                        synchronous: true, // Optional: Set to true for synchronous publishing
                        autoCreateProjects: true,
                    )
                }
            }
        }        
        // stage('build image') {
        //     steps {
        //         dir('Docker-Projects/angular/expense-tracker-main') {
        //             sh "docker build . -t ${IMAGE_NAME}"
        //             sh "echo IMAGE_NAME=${IMAGE_NAME} > .env"
        //             sh "export IMAGE_NAME==${IMAGE_NAME}"
        //         }
        //     }
        // }
        // stage('Login to Docker') {
        //     steps {
        //         sh "docker login -u ${DOCKER_CREDS_USR} -p ${DOCKER_CREDS_PSW}" 
        //     }
        // }
        //  stage('PUSH') {
        //     steps {
        //         sh "docker push ${IMAGE_NAME}"
        //     }
        // }
        // stage('Logout from Docker') {
        //     steps {
        //         sh "docker logout" 
        //     }
        // }
        // stage('run docker stack') {
        //     steps {
        //         dir('Docker-Projects/angular/expense-tracker-main') {
        //             sh "docker stack deploy --compose-file docker-compose.yml expense" 
        //         }
        //     }
        // }
        // stage('Get Commit Hashes') {
        //     steps {
        //         script {
        //             def commitHashes = sh(script: 'git log -n 3 --pretty=format:%H', returnStdout: true).trim().split('\\n')
        //             echo "Last 3 commit hashes: ${commitHashes}"

        //             echo "Latest commit hash: ${commitHashes[0]}"
        //             echo "Latest commit hash: ${commitHashes[0].take(7)}"
        //             echo "Second latest commit hash: ${commitHashes[1]}"
        //             echo "Second latest commit hash:${commitHashes[1].take(7)}"
        //             echo "Third latest commit hash: ${commitHashes[2]}"
        //             echo "Third latest commit hash: ${commitHashes[2].take(7)}"
        //         }
        //     }
        // }

    // post {
    //     always {
    //         archiveArtifacts artifacts: 'build/libs/**/*.jar', fingerprint: true
    //         junit 'build/reports/**/*.xml'
    //     }
    // }
    }
}